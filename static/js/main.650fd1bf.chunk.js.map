{"version":3,"sources":["mui-base/CardHeader/BaseCardHeader.ts","mui-base/CardHeader/CardHeader.tsx","mui-base/List/BaseList.ts","mui-base/List/DroppableList.tsx","mui-base/List/List.tsx","mui-base/ListItem/BaseListItem.ts","mui-base/ListItem/DraggableListItem.tsx","mui-base/ListItem/ListItem.tsx","mui-base/ListItemText/BaseListItemText.ts","mui-base/ListItemText/ListItemText.tsx","core/Tooltip.ts","core/CardHeader.tsx","sandbox/list/index.tsx","sandbox/list-card/index.tsx","sandbox/inputlist/App.tsx","serviceWorker.js","index.js"],"names":["BaseCardHeader","CardHeader","disableTypography","classes","title","titleTypographyProps","titleTextFieldProps","other","defaultValue","BaseList","DroppableList","children","className","droppableProps","innerRef","placeholder","isDraggingOver","clsx","ref","List","BaseListItem","DraggableListItem","draggableProps","dragHandleProps","isDragging","role","draggable","ListItem","BaseListItemText","ListItemText","primary","primaryTypographyProps","primaryTextFieldProps","secondary","secondaryTypographyProps","secondaryTextFieldProps","dense","useContext","ListContext","variant","color","display","component","ErrorTooltip","withStyles","theme","tooltip","backgroundColor","palette","error","dark","maxWidth","fontSize","typography","pxToRem","border","light","Tooltip","titleLabel","titleHelperText","Alert","severity","AlertTitle","helperText","label","required","currentId","Date","now","tmpId","useToggle","initialValue","cb","useState","state","setState","on","off","toggle","newState","useEditValue","inputValue","setInputValue","edited","startEditing","stopEditing","changeInput","event","target","value","keyInput","key","useItems","initialItems","onSetItems","map","item","checked","Boolean","items","setItems","wrappedSetItems","add","concat","id","remove","filter","updatePrimary","toggleCheck","checkAll","uncheckAll","clear","onDragEnd","source","destination","droppableId","index","newItems","splice","TextInput","clearInputAndAdd","useInputValue","hooks","elevation","style","marginBottom","padding","container","xs","md","paddingRight","onChange","onKeyPress","fullWidth","onClick","update","inlineEdit","ui","primaryHelperText","primaryLabel","listItemTextProps","props","autoFocus","onBlur","dnd","listItemProps","draggableId","aria-label","listProps","lastIndex","length","divider","CheckMenu","React","anchorEl","setAnchorEl","open","handleClose","disabled","allChecked","every","aria-controls","aria-haspopup","currentTarget","onClose","anchorOrigin","vertical","horizontal","transformOrigin","useCollection","initialCollection","onSetCollection","setTitle","undefined","wrappedSetTitle","ListCard","WrappedListCard","defaultCollection","localStorageId","JSON","parse","localStorage","getItem","saveCollection","collection","setItem","stringify","displayName","name","withLocalStorage","withCollection","withDnD","setFilter","checkedItems","uncheckedItems","nItems","nChecked","nUnchecked","initialUI","listUI","cardHeaderProps","action","sm","disableRipple","size","App","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.650fd1bf.chunk.js","sourcesContent":["import { CardHeader, CardHeaderProps } from \"@material-ui/core\";\n\nexport type BaseCardHeaderProps = CardHeaderProps;\nexport type BaseCardHeaderPropsWithoutRef = Omit<BaseCardHeaderProps, \"ref\">;\n\nexport const BaseCardHeader = CardHeader;\n","import React, { FunctionComponent, ReactNode } from \"react\";\nimport { TextField, TextFieldProps } from \"@material-ui/core\";\nimport {\n  BaseCardHeader,\n  BaseCardHeaderPropsWithoutRef\n} from \"./BaseCardHeader\";\n\nexport interface CardHeaderProps\n  extends Omit<BaseCardHeaderPropsWithoutRef, \"title\"> {\n  title: ReactNode;\n  titleTextFieldProps?: TextFieldProps;\n}\n\nexport const CardHeader: FunctionComponent<CardHeaderProps> = ({\n  disableTypography,\n  classes,\n  title,\n  titleTypographyProps,\n  titleTextFieldProps,\n  ...other\n}) => {\n  if (titleTextFieldProps) {\n    return (\n      <BaseCardHeader\n        disableTypography\n        title={<TextField defaultValue={title} {...titleTextFieldProps} />}\n        {...other}\n      />\n    );\n  }\n\n  return (\n    <BaseCardHeader\n      disableTypography={disableTypography}\n      classes={classes}\n      title={title}\n      titleTypographyProps={titleTypographyProps}\n      {...other}\n    />\n  );\n};\n","import { List, ListProps } from \"@material-ui/core\";\n\nexport type BaseListProps = ListProps;\nexport type BaseListPropsWithoutRef = Omit<BaseListProps, \"ref\">;\n\nexport const BaseList = List;\n","import React, { FunctionComponent } from \"react\";\nimport {\n  Droppable,\n  DroppableProps,\n  DroppableProvided,\n  DroppableStateSnapshot\n} from \"react-beautiful-dnd\";\nimport clsx from \"clsx\";\nimport { BaseList, BaseListPropsWithoutRef } from \"./BaseList\";\n\nexport type DroppablePropsWithoutChildren = Omit<DroppableProps, \"children\">;\n\nexport interface DroppableListProps extends BaseListPropsWithoutRef {\n  droppableProps: DroppablePropsWithoutChildren;\n}\n\nexport const DroppableList: FunctionComponent<DroppableListProps> = ({\n  children,\n  className,\n  droppableProps,\n  ...other\n}) => (\n  <Droppable {...droppableProps}>\n    {(\n      { innerRef, droppableProps, placeholder }: DroppableProvided,\n      { isDraggingOver }: DroppableStateSnapshot\n    ) => (\n      <BaseList\n        className={clsx(className, { isDraggingOver })}\n        ref={innerRef}\n        {...droppableProps}\n        {...other}\n      >\n        {children}\n        {placeholder}\n      </BaseList>\n    )}\n  </Droppable>\n);\n","import React, { FunctionComponent } from \"react\";\nimport { DroppableList, DroppablePropsWithoutChildren } from \"./DroppableList\";\nimport { BaseList, BaseListPropsWithoutRef } from \"./BaseList\";\n\nexport interface ListProps extends BaseListPropsWithoutRef {\n  droppableProps?: DroppablePropsWithoutChildren | false;\n}\n\nexport const List: FunctionComponent<ListProps> = ({\n  children,\n  droppableProps,\n  ...other\n}) => {\n  if (droppableProps) {\n    return (\n      <DroppableList droppableProps={droppableProps} {...other}>\n        {children}\n      </DroppableList>\n    );\n  }\n\n  return <BaseList {...other}>{children}</BaseList>;\n};\n","import { ListItem, ListItemProps } from \"@material-ui/core\";\n\nexport type BaseListItemProps = ListItemProps<\"li\", { button?: false }>;\nexport type BaseListItemPropsWithoutRef = Omit<BaseListItemProps, \"ref\">;\n\nexport const BaseListItem = ListItem;\n","import React, { FunctionComponent } from \"react\";\nimport {\n  Draggable,\n  DraggableProps,\n  DraggableProvided,\n  DraggableStateSnapshot\n} from \"react-beautiful-dnd\";\nimport clsx from \"clsx\";\nimport { BaseListItem, BaseListItemPropsWithoutRef } from \"./BaseListItem\";\n\nexport type DraggablePropsWithoutChildren = Omit<DraggableProps, \"children\">;\n\nexport interface DraggableListItemProps extends BaseListItemPropsWithoutRef {\n  draggableProps: DraggablePropsWithoutChildren;\n}\n\nexport const DraggableListItem: FunctionComponent<DraggableListItemProps> = ({\n  children,\n  className,\n  draggableProps,\n  ...other\n}) => (\n  <Draggable {...draggableProps}>\n    {(\n      { innerRef, draggableProps, dragHandleProps }: DraggableProvided,\n      { isDragging }: DraggableStateSnapshot\n    ) => (\n      <BaseListItem\n        className={clsx(className, { isDragging })}\n        ref={innerRef}\n        {...draggableProps}\n        {...dragHandleProps}\n        role=\"listitem\"\n        draggable\n        {...other}\n      >\n        {children}\n      </BaseListItem>\n    )}\n  </Draggable>\n);\n","import React, { FunctionComponent } from \"react\";\nimport {\n  DraggableListItem,\n  DraggablePropsWithoutChildren\n} from \"./DraggableListItem\";\nimport { BaseListItem, BaseListItemPropsWithoutRef } from \"./BaseListItem\";\n\nexport interface ListItemProps extends BaseListItemPropsWithoutRef {\n  draggableProps?: DraggablePropsWithoutChildren | false;\n}\n\nexport const ListItem: FunctionComponent<ListItemProps> = ({\n  children,\n  draggableProps,\n  ...other\n}) => {\n  if (draggableProps) {\n    return (\n      <DraggableListItem draggableProps={draggableProps} {...other}>\n        {children}\n      </DraggableListItem>\n    );\n  }\n\n  return <BaseListItem {...other}>{children}</BaseListItem>;\n};\n","import { ListItemText, ListItemTextProps } from \"@material-ui/core\";\n\nexport type BaseListItemTextProps = ListItemTextProps;\nexport type BaseListItemTextPropsWithoutRef = Omit<\n  BaseListItemTextProps,\n  \"ref\"\n>;\n\nexport const BaseListItemText = ListItemText;\n","import React, { FunctionComponent, useContext } from \"react\";\nimport { Typography, TextField, TextFieldProps } from \"@material-ui/core\";\nimport ListContext from \"@material-ui/core/List/ListContext\";\nimport {\n  BaseListItemText,\n  BaseListItemTextPropsWithoutRef\n} from \"./BaseListItemText\";\n\nexport interface ListItemTextProps extends BaseListItemTextPropsWithoutRef {\n  primaryTextFieldProps?: TextFieldProps;\n  secondaryTextFieldProps?: TextFieldProps;\n}\n\nexport const ListItemText: FunctionComponent<ListItemTextProps> = ({\n  disableTypography,\n  classes,\n  primary,\n  primaryTypographyProps,\n  primaryTextFieldProps,\n  secondary,\n  secondaryTypographyProps,\n  secondaryTextFieldProps,\n  ...other\n}) => {\n  const { dense } = useContext(ListContext);\n\n  if (primaryTextFieldProps) {\n    return (\n      <BaseListItemText\n        disableTypography\n        primary={\n          <TextField defaultValue={primary} {...primaryTextFieldProps} />\n        }\n        secondary={\n          disableTypography\n            ? secondary\n            : secondary && (\n                <Typography\n                  variant=\"body2\"\n                  className={classes?.secondary}\n                  color=\"textSecondary\"\n                  display=\"block\"\n                  {...secondaryTypographyProps}\n                >\n                  {secondary}\n                </Typography>\n              )\n        }\n        {...other}\n      />\n    );\n  }\n\n  if (secondaryTextFieldProps) {\n    return (\n      <BaseListItemText\n        disableTypography\n        primary={\n          disableTypography ? (\n            primary\n          ) : (\n            <Typography\n              variant={dense ? \"body2\" : \"body1\"}\n              className={classes?.primary}\n              component=\"span\"\n              display=\"block\"\n              {...primaryTypographyProps}\n            >\n              {primary}\n            </Typography>\n          )\n        }\n        secondary={\n          <TextField defaultValue={secondary} {...secondaryTextFieldProps} />\n        }\n        {...other}\n      />\n    );\n  }\n\n  return (\n    <BaseListItemText\n      disableTypography={disableTypography}\n      classes={classes}\n      primary={primary}\n      secondary={secondary}\n      primaryTypographyProps={primaryTypographyProps}\n      secondaryTypographyProps={secondaryTypographyProps}\n      {...other}\n    />\n  );\n};\n","import { Tooltip } from \"@material-ui/core\";\nimport { withStyles, Theme } from \"@material-ui/core/styles\";\n\nconst maxWidth = 220;\n\nexport const ErrorTooltip = withStyles((theme: Theme) => ({\n  tooltip: {\n    backgroundColor: theme.palette.error.dark,\n    color: \"white\",\n    maxWidth,\n    fontSize: theme.typography.pxToRem(12),\n    border: \"1px solid \" + theme.palette.error.light\n  }\n}))(Tooltip);\n\nexport default Tooltip;\n","import React, { FunctionComponent } from \"react\";\nimport { TextFieldProps } from \"@material-ui/core\";\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\nimport {\n  CardHeader as BaseCardHeader,\n  CardHeaderProps as BaseCardHeaderProps\n} from \"../mui-base\";\nimport { ErrorTooltip } from \"./Tooltip\";\n\nexport interface CardHeaderProps extends BaseCardHeaderProps {\n  titleLabel?: string;\n  titleHelperText?: string;\n  titleTextFieldProps?: TextFieldProps;\n  error?: boolean;\n}\n\nexport const CardHeader: FunctionComponent<CardHeaderProps> = ({\n  disableTypography,\n  title,\n  titleLabel = \"Title\",\n  titleHelperText,\n  titleTextFieldProps,\n  error,\n  ...other\n}) => {\n  return (\n    <BaseCardHeader\n      disableTypography={disableTypography || error}\n      title={\n        titleTextFieldProps || !error ? (\n          title\n        ) : (\n          <ErrorTooltip title={titleHelperText || \"Invalid title\"}>\n            <Alert variant=\"outlined\" severity=\"error\">\n              <AlertTitle>{title}</AlertTitle>\n            </Alert>\n          </ErrorTooltip>\n        )\n      }\n      titleTextFieldProps={\n        titleTextFieldProps && {\n          ...titleTextFieldProps,\n          error,\n          helperText: titleHelperText,\n          label: titleLabel,\n          required: true\n        }\n      }\n      {...other}\n    />\n  );\n};\n","import React, {\n  FunctionComponent,\n  useState,\n  ChangeEvent,\n  KeyboardEvent\n} from \"react\";\n\nimport {\n  Paper,\n  Grid,\n  TextField,\n  Button,\n  Checkbox,\n  IconButton\n} from \"@material-ui/core\";\nimport { DeleteOutlined } from \"@material-ui/icons\";\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\n\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\n\nimport {\n  List as BaseList,\n  ListProps as BaseListProps,\n  ListItem as BaseListItem,\n  ListItemProps as BaseListItemProps,\n  ListItemText as BaseListItemText,\n  ListItemTextProps as BaseListItemTextProps\n} from \"../../mui-base\";\n\nimport { ErrorTooltip } from \"../../core\";\n\nimport { RequiredKeys } from \"../../generics\";\n\nexport interface Item {\n  id: string;\n  primary: string;\n  checked?: boolean;\n\n  error?: true;\n  primaryHelperText?: string;\n  primaryLabel?: string;\n}\n\nexport type ListProps = {\n  hooks: ReturnType<typeof useItems>;\n  ui?: ListUI;\n  droppableId?: string;\n  listItemProps?: BaseListItemProps;\n} & BaseListProps;\n\nexport type ListUI = {\n  inlineEdit?: boolean;\n  dnd?: boolean;\n};\n\nlet currentId = Date.now();\nexport const tmpId = () => \"tmp\" + currentId++;\n\nexport const useToggle = (\n  initialValue: boolean = false,\n  cb?: (value: boolean) => void\n) => {\n  const [state, setState] = useState(initialValue);\n\n  return {\n    state,\n    on: () => {\n      setState(true);\n      if (cb) cb(true);\n    },\n    off: () => {\n      setState(false);\n      if (cb) cb(false);\n    },\n    toggle: () => {\n      const newState = !state;\n      setState(newState);\n      if (cb) cb(newState);\n    }\n  };\n};\n\nexport const useListUI = (initialUI: ListUI, cb?: (ui: ListUI) => void) => {\n  const inlineEdit = useToggle(\n    Boolean(initialUI.inlineEdit),\n    cb\n      ? (state: boolean) => {\n          cb({ ...initialUI, inlineEdit: state });\n        }\n      : undefined\n  );\n\n  const dnd = useToggle(\n    Boolean(initialUI.dnd),\n    cb\n      ? (state: boolean) => {\n          cb({ ...initialUI, dnd: state });\n        }\n      : undefined\n  );\n\n  return { inlineEdit, dnd };\n};\n\nexport const useInputValue = (cb: (value: string) => void) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const changeInput = (event: ChangeEvent<HTMLInputElement>) =>\n    setInputValue(event.target.value);\n\n  const clearInputAndAdd = () => {\n    setInputValue(\"\");\n    cb(inputValue);\n  };\n\n  const keyInput = (event: KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      clearInputAndAdd();\n      return true;\n    }\n\n    return false;\n  };\n\n  return {\n    inputValue,\n    changeInput,\n    clearInputAndAdd,\n    keyInput\n  };\n};\n\nexport const useEditValue = (\n  initialValue: string,\n  cb: (value: string) => void\n) => {\n  const [inputValue, setInputValue] = useState(initialValue);\n  const { state: edited, on: startEditing, off: stopEditing } = useToggle();\n\n  const changeInput = (event: ChangeEvent<HTMLInputElement>) =>\n    setInputValue(event.target.value);\n\n  const keyInput = (event: KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      cb(inputValue);\n      stopEditing();\n      return true;\n    }\n\n    return false;\n  };\n\n  return {\n    inputValue,\n    edited,\n    changeInput,\n    keyInput,\n    startEditing,\n    stopEditing\n  };\n};\n\nexport const useItems = (\n  initialItems: Item[] = [],\n  onSetItems?: (items: Item[]) => void\n) => {\n  const [items, setItems] = useState(\n    initialItems.map(\n      (item) =>\n        // Make sure checkboxes are controlled consistently\n        ({ ...item, checked: Boolean(item.checked) } as RequiredKeys<\n          Item,\n          \"checked\"\n        >)\n    )\n  );\n\n  const wrappedSetItems = onSetItems\n    ? (items: RequiredKeys<Item, \"checked\">[]) => {\n        setItems(items);\n        onSetItems(items);\n      }\n    : setItems;\n\n  return {\n    items,\n    setItems: wrappedSetItems,\n\n    add: (value: string) => {\n      wrappedSetItems(\n        items.concat({ id: tmpId(), primary: value, checked: false })\n      );\n    },\n    remove: (id: string) => {\n      wrappedSetItems(items.filter((item) => item.id !== id));\n    },\n    updatePrimary: (id: string, value: string) => {\n      wrappedSetItems(\n        items.map((item) =>\n          item.id !== id ? item : { ...item, primary: value }\n        )\n      );\n    },\n    toggleCheck: (id: string) => {\n      wrappedSetItems(\n        items.map((item) =>\n          item.id !== id ? item : { ...item, checked: !item.checked }\n        )\n      );\n    },\n\n    checkAll: () => {\n      wrappedSetItems(items.map((item) => ({ ...item, checked: true })));\n    },\n    uncheckAll: () => {\n      wrappedSetItems(items.map((item) => ({ ...item, checked: false })));\n    },\n    clear: () => {\n      wrappedSetItems([]);\n    }\n  };\n};\n\nexport const withItems = (List: FunctionComponent<ListProps>) => {\n  const WrappedList: FunctionComponent<\n    Omit<ListProps, \"hooks\"> & {\n      defaultItems?: Item[];\n      onSetItems?: (items: Item[]) => void;\n    }\n  > = ({ defaultItems, onSetItems, ...other }) => {\n    return <List {...other} hooks={useItems(defaultItems, onSetItems)} />;\n  };\n\n  WrappedList.displayName = `WithItems(${\n    List.displayName || List.name || \"List\"\n  })`;\n\n  return WrappedList;\n};\n\nexport const onDragEnd = ({\n  items = [],\n  setItems\n}: {\n  items: RequiredKeys<Item, \"checked\">[];\n  setItems: (items: RequiredKeys<Item, \"checked\">[]) => void;\n}) =>\n  setItems\n    ? ({ source, destination }: DropResult) => {\n        if (!destination) {\n          return;\n        }\n\n        if (destination.droppableId === source.droppableId) {\n          if (destination.index === source.index) {\n            return;\n          }\n\n          const newItems = items.concat();\n          newItems.splice(source.index, 1);\n          newItems.splice(destination.index, 0, items[source.index]);\n\n          setItems(newItems);\n        }\n      }\n    : () => {};\n\nexport const withDnD = (List: FunctionComponent<ListProps>) => {\n  const WrappedList: FunctionComponent<ListProps> = ({\n    hooks,\n    droppableId,\n    ...other\n  }) => (\n    <DragDropContext onDragEnd={onDragEnd(hooks)}>\n      <List hooks={hooks} droppableId={droppableId || \"drop-area\"} {...other} />\n    </DragDropContext>\n  );\n\n  WrappedList.displayName = `WithDnD(${\n    List.displayName || List.name || \"List\"\n  })`;\n\n  return WrappedList;\n};\n\nexport const withLocalStorage = (\n  List: FunctionComponent<\n    Omit<ListProps, \"hooks\"> & {\n      defaultItems?: Item[];\n      onSetItems?: (items: Item[]) => void;\n    }\n  >\n) => {\n  const WrappedList: FunctionComponent<\n    Omit<ListProps, \"hooks\"> & {\n      defaultItems?: Item[];\n      onSetItems?: (items: Item[]) => void;\n      localStorageId: string;\n    }\n  > = ({ defaultItems, onSetItems, localStorageId, ...other }) => {\n    if (!defaultItems) {\n      defaultItems = JSON.parse(\n        localStorage.getItem(localStorageId) || \"[]\"\n      ) as Item[];\n    }\n\n    const saveItems = (items: Item[]) => {\n      localStorage.setItem(localStorageId, JSON.stringify(items));\n    };\n\n    return (\n      <List\n        {...other}\n        defaultItems={defaultItems}\n        onSetItems={\n          onSetItems\n            ? (items: Item[]) => {\n                onSetItems(items);\n                saveItems(items);\n              }\n            : saveItems\n        }\n      />\n    );\n  };\n\n  WrappedList.displayName = `WithLocalStorage(${\n    List.displayName || List.name || \"List\"\n  })`;\n\n  return WrappedList;\n};\n\nconst TextInput: FunctionComponent<{\n  hooks: { add: (value: string) => void };\n}> = ({ hooks: { add } }) => {\n  const { inputValue, changeInput, keyInput, clearInputAndAdd } = useInputValue(\n    add\n  );\n\n  return (\n    <Paper elevation={0} style={{ marginBottom: 16, padding: 16 }}>\n      <Grid container>\n        <Grid xs={10} md={11} item style={{ paddingRight: 16 }}>\n          <TextField\n            placeholder=\"Add item here\"\n            value={inputValue}\n            onChange={changeInput}\n            onKeyPress={keyInput}\n            fullWidth\n          />\n        </Grid>\n        <Grid xs={2} md={1} item>\n          <Button\n            fullWidth\n            color=\"secondary\"\n            variant=\"outlined\"\n            onClick={clearInputAndAdd}\n          >\n            Add\n          </Button>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nconst ListItemText: FunctionComponent<\n  {\n    primary: string;\n    hooks: { update: (value: string) => void };\n    ui: ListUI;\n    error?: true;\n    primaryHelperText?: string;\n    primaryLabel?: string;\n  } & Omit<BaseListItemTextProps, \"primary\">\n> = ({\n  primary,\n  hooks: { update },\n  ui: { inlineEdit },\n  error,\n  primaryHelperText,\n  primaryLabel = \"Item\",\n  ...listItemTextProps\n}) => {\n  const {\n    inputValue,\n    edited,\n    changeInput,\n    keyInput,\n    startEditing,\n    stopEditing\n  } = useEditValue(primary, update);\n\n  if (!primaryHelperText && error) {\n    primaryHelperText = \"Invalid item\";\n  }\n\n  const props =\n    inlineEdit && edited\n      ? {\n          primaryTextFieldProps: {\n            autoFocus: true,\n            fullWidth: true,\n            onChange: changeInput,\n            onBlur: stopEditing,\n            onKeyPress: keyInput,\n            error,\n            helperText: primaryHelperText,\n            label: primaryLabel,\n            required: true\n          }\n        }\n      : { onClick: startEditing };\n\n  return (\n    <BaseListItemText\n      primary={\n        (inlineEdit && edited) || !error ? (\n          inputValue\n        ) : (\n          <ErrorTooltip title={primaryHelperText!}>\n            <Alert variant=\"outlined\" severity=\"error\">\n              <AlertTitle>{inputValue}</AlertTitle>\n            </Alert>\n          </ErrorTooltip>\n        )\n      }\n      {...props}\n      {...listItemTextProps}\n    />\n  );\n};\n\nconst ListItem: FunctionComponent<\n  {\n    hooks: Item & {\n      remove: () => void;\n      update: (value: string) => void;\n      toggleCheck: () => void;\n    };\n    ui: ListUI;\n    dnd?: boolean;\n    index: number;\n    listItemTextProps?: Omit<BaseListItemTextProps, \"primary\">;\n  } & BaseListItemProps\n> = ({\n  hooks: {\n    id,\n    primary,\n    checked,\n    error,\n    primaryHelperText,\n    primaryLabel,\n    remove,\n    update,\n    toggleCheck\n  },\n  ui,\n  dnd,\n  index,\n  listItemTextProps,\n  ...listItemProps\n}) => {\n  return (\n    <BaseListItem\n      draggableProps={dnd && { draggableId: id, index }}\n      {...listItemProps}\n    >\n      <Checkbox onClick={toggleCheck} checked={checked} />\n      <ListItemText\n        primary={primary}\n        hooks={{ update }}\n        ui={ui}\n        error={error}\n        primaryHelperText={primaryHelperText}\n        primaryLabel={primaryLabel}\n        {...listItemTextProps}\n      />\n      <IconButton aria-label=\"Delete item\" onClick={remove}>\n        <DeleteOutlined />\n      </IconButton>\n    </BaseListItem>\n  );\n};\n\nexport const List: FunctionComponent<ListProps> = ({\n  hooks: { items, add, remove, updatePrimary, toggleCheck },\n  ui = {},\n  droppableId,\n  listItemProps,\n  ...listProps\n}) => {\n  const lastIndex = items.length - 1;\n  const dnd = ui.dnd && Boolean(droppableId);\n  const droppableProps = (dnd && { droppableId }) as\n    | false\n    | { droppableId: string };\n\n  return (\n    <>\n      <TextInput hooks={{ add }} />\n      <Paper elevation={0}>\n        <BaseList droppableProps={droppableProps} {...listProps}>\n          {items.map((item, index) => {\n            const id = item.id;\n            const hooks = {\n              ...item,\n              remove: () => remove(id),\n              update: (value: string) => updatePrimary(id, value),\n              toggleCheck: () => toggleCheck(id)\n            };\n\n            return (\n              <ListItem\n                key={id}\n                divider={index !== lastIndex}\n                index={index}\n                dnd={dnd}\n                hooks={hooks}\n                ui={ui}\n                {...listItemProps}\n              />\n            );\n          })}\n        </BaseList>\n      </Paper>\n    </>\n  );\n};\n","import React, { FunctionComponent, useState } from \"react\";\n\nimport {\n  Card,\n  CardProps,\n  CardContent,\n  CardActions,\n  Checkbox,\n  Button,\n  IconButton,\n  Popover,\n  MenuList,\n  MenuItem,\n  ListItemText,\n  Grid\n} from \"@material-ui/core\";\nimport { MoreVert } from \"@material-ui/icons\";\n\nimport { DragDropContext } from \"react-beautiful-dnd\";\n\nimport { CardHeader } from \"../../core\";\n\nimport {\n  Item,\n  useItems,\n  ListProps,\n  List,\n  ListUI,\n  onDragEnd,\n  useEditValue,\n  useListUI\n} from \"../list\";\n\nexport interface Collection {\n  id: string;\n  title: string;\n  items: Item[];\n}\n\nexport type ListCardProps = {\n  hooks: ReturnType<typeof useCollection>;\n  ui?: ListUI;\n  droppableId?: string;\n  listProps?: Omit<ListProps, \"hooks\" | \"droppableId\">;\n} & Omit<CardProps, \"title\">;\n\nfunction CheckMenu({\n  hooks,\n  ui: { inlineEdit, dnd }\n}: {\n  hooks: ReturnType<typeof useItems>;\n  ui: ReturnType<typeof useListUI>;\n}) {\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const { items, checkAll, uncheckAll, clear } = hooks;\n\n  const disabled = !items.length;\n  const allChecked = !disabled && items.every((item) => item.checked);\n\n  return (\n    <div>\n      <IconButton\n        aria-label=\"setting\"\n        aria-controls=\"check-menu\"\n        aria-haspopup=\"true\"\n        onClick={handleClick}\n      >\n        <MoreVert />\n      </IconButton>\n      <Popover\n        id=\"check-menu\"\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"center\"\n        }}\n        transformOrigin={{\n          vertical: \"top\",\n          horizontal: \"center\"\n        }}\n      >\n        <MenuList dense>\n          <MenuItem\n            disabled={disabled}\n            onClick={() => {\n              inlineEdit.toggle();\n            }}\n          >\n            <ListItemText>Inline edit</ListItemText>\n            <Checkbox disabled={disabled} checked={inlineEdit.state} />\n          </MenuItem>\n          <MenuItem\n            disabled={disabled}\n            onClick={() => {\n              dnd.toggle();\n            }}\n          >\n            <ListItemText>Drag and drop</ListItemText>\n            <Checkbox disabled={disabled} checked={dnd.state} />\n          </MenuItem>\n          <MenuItem\n            disabled={disabled}\n            onClick={() => {\n              if (allChecked) uncheckAll();\n              else checkAll();\n            }}\n          >\n            <ListItemText>Check all</ListItemText>\n            <Checkbox disabled={disabled} checked={allChecked} />\n          </MenuItem>\n          <MenuItem\n            disabled={disabled}\n            onClick={() => {\n              clear();\n              handleClose();\n            }}\n          >\n            <ListItemText>Clear list</ListItemText>\n          </MenuItem>\n        </MenuList>\n      </Popover>\n    </div>\n  );\n}\n\nexport const useCollection = (\n  initialCollection: Collection,\n  onSetCollection?: (collection: Collection) => void\n) => {\n  const id = initialCollection.id;\n  const [title, setTitle] = useState(initialCollection.title);\n  const hooks = useItems(\n    initialCollection.items,\n    onSetCollection\n      ? (items: Item[]) => {\n          onSetCollection({ id, title, items });\n        }\n      : undefined\n  );\n  const items = hooks.items;\n\n  const wrappedSetTitle = onSetCollection\n    ? (title: string) => {\n        onSetCollection({ id, title, items });\n      }\n    : setTitle;\n\n  return { ...hooks, title, setTitle: wrappedSetTitle };\n};\n\nexport const withCollection = (ListCard: FunctionComponent<ListCardProps>) => {\n  const WrappedListCard: FunctionComponent<\n    Omit<ListCardProps, \"hooks\"> & {\n      defaultCollection: Collection;\n      onSetCollection?: (collection: Collection) => void;\n    }\n  > = ({ defaultCollection, onSetCollection, ...other }) => {\n    return (\n      <ListCard\n        {...other}\n        hooks={useCollection(defaultCollection, onSetCollection)}\n      />\n    );\n  };\n\n  WrappedListCard.displayName = `WithItems(${\n    ListCard.displayName || ListCard.name || \"ListCard\"\n  })`;\n\n  return WrappedListCard;\n};\n\nexport const withDnD = (ListCard: FunctionComponent<ListCardProps>) => {\n  const WrappedListCard: FunctionComponent<ListCardProps> = ({\n    hooks,\n    droppableId,\n    ...other\n  }) => (\n    <DragDropContext onDragEnd={onDragEnd(hooks)}>\n      <ListCard\n        hooks={hooks}\n        droppableId={droppableId || \"drop-area\"}\n        {...other}\n      />\n    </DragDropContext>\n  );\n\n  WrappedListCard.displayName = `WithDnD(${\n    ListCard.displayName || ListCard.name || \"ListCard\"\n  })`;\n\n  return WrappedListCard;\n};\n\nexport const withLocalStorage = (\n  ListCard: FunctionComponent<\n    Omit<ListCardProps, \"hooks\"> & {\n      defaultCollection: Collection;\n      onSetCollection?: (collection: Collection) => void;\n    }\n  >\n) => {\n  const WrappedListCard: FunctionComponent<\n    Omit<ListCardProps, \"hooks\"> & {\n      defaultCollection?: Collection;\n      onSetCollection?: (collection: Collection) => void;\n      localStorageId: string;\n    }\n  > = ({ defaultCollection, onSetCollection, localStorageId, ...other }) => {\n    if (!defaultCollection) {\n      defaultCollection = JSON.parse(\n        localStorage.getItem(localStorageId) || \"[]\"\n      ) as Collection;\n    }\n\n    const saveCollection = (collection: Collection) => {\n      localStorage.setItem(localStorageId, JSON.stringify(collection));\n    };\n\n    return (\n      <ListCard\n        {...other}\n        defaultCollection={defaultCollection}\n        onSetCollection={\n          onSetCollection\n            ? (collection: Collection) => {\n                onSetCollection(collection);\n                saveCollection(collection);\n              }\n            : saveCollection\n        }\n      />\n    );\n  };\n\n  WrappedListCard.displayName = `WithLocalStorage(${\n    List.displayName || List.name || \"List\"\n  })`;\n\n  return WrappedListCard;\n};\n\nexport const ListCard: FunctionComponent<ListCardProps> = ({\n  hooks,\n  ui = {},\n  droppableId,\n  listProps,\n  ...other\n}) => {\n  const [filter, setFilter] = useState(\n    \"all\" as \"all\" | \"checked\" | \"unchecked\"\n  );\n  let items = hooks.items;\n  const checkedItems = items.filter((item) => item.checked);\n  const uncheckedItems = items.filter((item) => !item.checked);\n\n  const nItems = items.length;\n  const nChecked = checkedItems.length;\n  const nUnchecked = uncheckedItems.length;\n\n  if (filter === \"checked\") {\n    items = checkedItems;\n  } else if (filter === \"unchecked\") {\n    items = items.filter((item) => !item.checked);\n  } else {\n    items = uncheckedItems.concat(checkedItems);\n  }\n\n  hooks = { ...hooks, items };\n\n  const {\n    inputValue,\n    edited,\n    changeInput,\n    keyInput,\n    startEditing,\n    stopEditing\n  } = useEditValue(hooks.title, hooks.setTitle);\n\n  const listUI = useListUI(ui);\n  ui = { inlineEdit: listUI.inlineEdit.state, dnd: listUI.dnd.state };\n\n  const cardHeaderProps =\n    ui.inlineEdit && edited\n      ? {\n          titleTextFieldProps: {\n            autoFocus: true,\n            fullWidth: true,\n            onChange: changeInput,\n            onBlur: stopEditing,\n            onKeyPress: keyInput\n          }\n        }\n      : { onClick: startEditing };\n\n  return (\n    <Card {...other}>\n      <CardHeader\n        action={<CheckMenu hooks={hooks} ui={listUI} />}\n        {...cardHeaderProps}\n        title={inputValue}\n      />\n      <CardActions>\n        <Grid container>\n          <Grid item xs={4} sm={3} md={2}>\n            <Button\n              variant={filter === \"all\" ? \"contained\" : \"outlined\"}\n              fullWidth\n              disableRipple\n              size=\"small\"\n              color=\"primary\"\n              onClick={() => setFilter(\"all\")}\n            >\n              All ({nItems})\n            </Button>\n          </Grid>\n          <Grid item xs={4} sm={3} md={2}>\n            <Button\n              variant={filter === \"checked\" ? \"contained\" : \"outlined\"}\n              fullWidth\n              disableRipple\n              size=\"small\"\n              color=\"primary\"\n              onClick={() => setFilter(\"checked\")}\n            >\n              Checked ({nChecked})\n            </Button>\n          </Grid>\n          <Grid item xs={4} sm={3} md={2}>\n            <Button\n              variant={filter === \"unchecked\" ? \"contained\" : \"outlined\"}\n              fullWidth\n              disableRipple\n              size=\"small\"\n              color=\"primary\"\n              onClick={() => setFilter(\"unchecked\")}\n            >\n              Unchecked ({nUnchecked})\n            </Button>\n          </Grid>\n        </Grid>\n      </CardActions>\n      <CardContent>\n        <List hooks={hooks} ui={ui} droppableId={droppableId} {...listProps} />\n      </CardContent>\n    </Card>\n  );\n};\n","import React from \"react\";\nimport {\n  ListCard as BaseListCard,\n  withDnD,\n  withCollection,\n  withLocalStorage\n} from \"../list-card\";\n\nconst todoListKey = \"todolist\";\n\nconst ListCard = withLocalStorage(withCollection(withDnD(BaseListCard)));\n\nfunction App() {\n  return <ListCard ui={{ inlineEdit: true }} localStorageId={todoListKey} />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./sandbox/inputlist/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}